diff -Naur a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c	2021-10-29 12:55:38.000000000 +0200
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c	2023-05-11 12:22:22.979238000 +0200
@@ -68,6 +68,7 @@
 #define HDMI_TX_RESOURCE_NUM 4
 #define HDMI_TX_PWR_CTRL_NUM	6
 
+static unsigned char init_audio_source;									   
 static struct class *hdmitx_class;
 static int set_disp_mode_auto(void);
 static void hdmitx_get_edid(struct hdmitx_dev *hdev);
@@ -2068,6 +2069,21 @@
 		pos += snprintf(buf+pos, PAGE_SIZE, "cs = %d\n",
 			hdev->para->cs);
 	}
+	
+	switch (init_audio_source) {
+	case 0:
+		conf = "hdmi";
+		break;
+	case 1:
+		conf = "spdif";
+		break;
+	case 2:
+		conf = "btpcm";
+		break;
+	default:
+		conf = "none";
+	}
+	pos += snprintf(buf+pos, PAGE_SIZE, "audio output: %s\n", conf);															  
 
 	switch (hdev->tx_aud_cfg) {
 	case 0:
@@ -2301,6 +2317,25 @@
 			hdmitx_device.flag_3dss = 0;
 			hdmi_set_3d(&hdmitx_device, T3D_DISABLE, 0);
 		}
+	} else if(strncmp(buf, "audio_", 6)==0) {
+        if(strncmp(buf+6, "off", 3) == 0) {
+            hdmitx_device.tx_aud_cfg = 0;
+            hdmitx_device.hwop.cntlconfig(&hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_MUTE);
+            pr_info("AUDIO configure off\n");
+        }
+        else if(strncmp(buf+6, "on", 2) == 0) {
+            hdmitx_device.tx_aud_cfg = 1;
+            hdmitx_device.hwop.cntlconfig(&hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_UNMUTE);
+            pr_info("AUDIO configure on\n");
+        }
+        else if(strncmp(buf+6, "auto", 4) == 0) {
+            // auto mode. if sink doesn't support current audio format, then no audio output
+            hdmitx_device.tx_aud_cfg = 2;
+            pr_info("AUDIO configure auto\n");
+        }
+        else {
+            pr_info("AUDIO configure error\n");
+        }		
 	} else if (strncmp(buf, "sdr", 3) == 0) {
 		data.features = 0x00010100;
 		hdmitx_set_drm_pkt(&data);
@@ -4066,6 +4101,28 @@
 	return pos;
 }
 
+static ssize_t show_audio_source(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	int pos = 0;
+
+	pos += snprintf(buf+pos, PAGE_SIZE, "%d\r\n",
+		init_audio_source);
+	return pos;
+}
+
+static ssize_t store_audio_source(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	if (strncmp(buf, "0", 1) == 0)
+		init_audio_source = 0;
+	if (strncmp(buf, "1", 1) == 0)
+		init_audio_source = 1;
+	if (strncmp(buf, "2", 1) == 0)
+		init_audio_source = 2;	
+	return count;
+}
+
 static DEVICE_ATTR(disp_mode, 0664, show_disp_mode, store_disp_mode);
 static DEVICE_ATTR(attr, 0664, show_attr, store_attr);
 static DEVICE_ATTR(aud_mode, 0644, show_aud_mode, store_aud_mode);
@@ -4132,6 +4189,7 @@
 static DEVICE_ATTR(hdmi_init, 0444, show_hdmi_init, NULL);
 static DEVICE_ATTR(ready, 0664, show_ready, store_ready);
 static DEVICE_ATTR(support_3d, 0444, show_support_3d, NULL);
+static DEVICE_ATTR(audio_source, 0664, show_audio_source, store_audio_source);
 
 static struct vinfo_s *hdmitx_vinfo;
 static struct vinfo_s *hdmitx_get_current_vinfo(void)
@@ -5249,6 +5307,8 @@
 {
 	int r, ret = 0;
 	struct device *dev;
+	
+	init_audio_source = 0;	
 
 	pr_info(SYS "amhdmitx_probe start\n");
 
@@ -5342,6 +5402,7 @@
 	ret = device_create_file(dev, &dev_attr_allm_mode);
 	ret = device_create_file(dev, &dev_attr_contenttype_cap);
 	ret = device_create_file(dev, &dev_attr_contenttype_mode);
+	ret = device_create_file(dev, &dev_attr_audio_source);
 
 #ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
 	register_early_suspend(&hdmitx_early_suspend_handler);
@@ -5376,6 +5437,8 @@
 {
 	struct device *dev = hdmitx_device.hdtx_dev;
 
+    init_audio_source = 0;
+	
 	cancel_work_sync(&hdmitx_device.work_hdr);
 
 	if (hdmitx_device.hwop.uninit)
@@ -5439,6 +5502,7 @@
 	device_remove_file(dev, &dev_attr_hdcp22_base);
 	device_remove_file(dev, &dev_attr_swap);
 	device_remove_file(dev, &dev_attr_hdmi_hdr_status);
+	device_remove_file(dev, &dev_attr_audio_source);
 
 	cdev_del(&hdmitx_device.cdev);
 
