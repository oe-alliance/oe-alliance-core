diff --git a/core/rtw_br_ext.c b/core/rtw_br_ext.c
index 9a0effd..deaedc2 100644
--- a/core/rtw_br_ext.c
+++ b/core/rtw_br_ext.c
@@ -17,7 +17,10 @@
 #ifdef __KERNEL__
 	#include <linux/if_arp.h>
 	#include <net/ip.h>
+	#include <linux/version.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0))
 	#include <net/ipx.h>
+#endif
 	#include <linux/atalk.h>
 	#include <linux/udp.h>
 	#include <linux/if_pppox.h>
@@ -169,6 +172,7 @@ static __inline__ void __nat25_generate_ipv4_network_addr(unsigned char *network
 }
 
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0))
 static __inline__ void __nat25_generate_ipx_network_addr_with_node(unsigned char *networkAddr,
 		unsigned int *ipxNetAddr, unsigned char *ipxNodeAddr)
 {
@@ -189,6 +193,7 @@ static __inline__ void __nat25_generate_ipx_network_addr_with_socket(unsigned ch
 	memcpy(networkAddr + 1, (unsigned char *)ipxNetAddr, 4);
 	memcpy(networkAddr + 5, (unsigned char *)ipxSocketAddr, 2);
 }
+#endif
 
 
 static __inline__ void __nat25_generate_apple_network_addr(unsigned char *networkAddr,
@@ -889,6 +894,7 @@ int nat25_db_handle(_adapter *priv, struct sk_buff *skb, int method)
 		}
 	}
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0))
 	/*---------------------------------------------------*/
 	/*         Handle IPX and Apple Talk frame          */
 	/*---------------------------------------------------*/
@@ -1109,6 +1115,7 @@ int nat25_db_handle(_adapter *priv, struct sk_buff *skb, int method)
 
 		return -1;
 	}
+#endif
 
 	/*---------------------------------------------------*/
 	/*                Handle PPPoE frame                */
diff --git a/os_dep/osdep_service.c b/os_dep/osdep_service.c
index 34b73b4..bc16fcf 100644
--- a/os_dep/osdep_service.c
+++ b/os_dep/osdep_service.c
@@ -2220,7 +2220,11 @@ static int isFileReadable(const char *path, u32 *sz)
 	if (IS_ERR(fp))
 		ret = PTR_ERR(fp);
 	else {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+		oldfs = force_uaccess_begin();
+#else
 		oldfs = get_fs();
+#endif
 
 		if (1 != readFile(fp, &buf, 1))
 			ret = PTR_ERR(fp);
@@ -2233,7 +2237,11 @@ static int isFileReadable(const char *path, u32 *sz)
 			#endif
 		}
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+		force_uaccess_end(oldfs);
+#else
 		set_fs(oldfs);
+#endif
 		filp_close(fp, NULL);
 	}
 	return ret;
@@ -2257,9 +2265,17 @@ static int retriveFromFile(const char *path, u8 *buf, u32 sz)
 		if (0 == ret) {
 			RTW_INFO("%s openFile path:%s fp=%p\n", __FUNCTION__, path , fp);
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+			oldfs = force_uaccess_begin();
+#else
 			oldfs = get_fs();
+#endif
 			ret = readFile(fp, buf, sz);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+			force_uaccess_end(oldfs);
+#else
 			set_fs(oldfs);
+#endif
 			closeFile(fp);
 
 			RTW_INFO("%s readFile, ret:%d\n", __FUNCTION__, ret);
@@ -2291,9 +2307,17 @@ static int storeToFile(const char *path, u8 *buf, u32 sz)
 		if (0 == ret) {
 			RTW_INFO("%s openFile path:%s fp=%p\n", __FUNCTION__, path , fp);
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+			oldfs = force_uaccess_begin();
+#else
 			oldfs = get_fs();
+#endif
 			ret = writeFile(fp, buf, sz);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0))
+			force_uaccess_end(oldfs);
+#else
 			set_fs(oldfs);
+#endif
 			closeFile(fp);
 
 			RTW_INFO("%s writeFile, ret:%d\n", __FUNCTION__, ret);
