diff --git a/lib/actions/action.cpp b/lib/actions/action.cpp
index ce91b0b..46f461b 100644
--- a/lib/actions/action.cpp
+++ b/lib/actions/action.cpp
@@ -42,7 +42,7 @@ RESULT eActionMap::getInstance(ePtr<eActionMap> &ptr)
 	return 0;
 }
 
-void eActionMap::bindAction(const std::string &context, int priority, int id, eWidget *widget)
+void eActionMap::bindAction(const std::string &context, long long int priority, int id, eWidget *widget)
 {
 	eActionBinding bnd;
 
@@ -50,10 +50,10 @@ void eActionMap::bindAction(const std::string &context, int priority, int id, eW
 	bnd.m_context = context;
 	bnd.m_widget = widget;
 	bnd.m_id = id;
-	m_bindings.insert(std::pair<int,eActionBinding>(priority, bnd));
+	m_bindings.insert(std::pair<long long int,eActionBinding>(priority, bnd));
 }
 
-void eActionMap::bindAction(const std::string &context, int priority, ePyObject function)
+void eActionMap::bindAction(const std::string &context, long long int priority, ePyObject function)
 {
 	eActionBinding bnd;
 
@@ -62,13 +62,13 @@ void eActionMap::bindAction(const std::string &context, int priority, ePyObject
 	bnd.m_widget = 0;
 	Py_INCREF(function);
 	bnd.m_fnc = function;
-	m_bindings.insert(std::pair<int,eActionBinding>(priority, bnd));
+	m_bindings.insert(std::pair<long long int,eActionBinding>(priority, bnd));
 }
 
 void eActionMap::unbindAction(eWidget *widget, int id)
 {
 	//eDebug("[eActionMap] unbind widget id=%d", id);
-	for (std::multimap<int, eActionBinding>::iterator i(m_bindings.begin()); i != m_bindings.end(); ++i)
+	for (std::multimap<long long int, eActionBinding>::iterator i(m_bindings.begin()); i != m_bindings.end(); ++i)
 		if (i->second.m_widget == widget && i->second.m_id == id)
 		{
 			m_bindings.erase(i);
@@ -79,7 +79,7 @@ void eActionMap::unbindAction(eWidget *widget, int id)
 void eActionMap::unbindAction(const std::string &context, ePyObject function)
 {
 	//eDebug("[eActionMap] unbind function from %s", context.c_str());
-	for (std::multimap<int, eActionBinding>::iterator i(m_bindings.begin()); i != m_bindings.end(); ++i)
+	for (std::multimap<long long int, eActionBinding>::iterator i(m_bindings.begin()); i != m_bindings.end(); ++i)
 		if (i->second.m_fnc && (PyObject_Compare(i->second.m_fnc, function) == 0))
 		{
 			Py_DECREF(i->second.m_fnc);
@@ -167,7 +167,7 @@ void eActionMap::keyPressed(const std::string &device, int key, int flags)
 	std::list<call_entry> call_list;
 
 	// iterate active contexts
-	for (std::multimap<int,eActionBinding>::iterator c(m_bindings.begin()); c != m_bindings.end(); ++c)
+	for (std::multimap<long long int,eActionBinding>::iterator c(m_bindings.begin()); c != m_bindings.end(); ++c)
 	{
 		if (flags == eRCKey::flagMake)
 			c->second.m_prev_seen_make_key = key;
diff --git a/lib/actions/action.h b/lib/actions/action.h
index e1fdd61..a47e1b3 100644
--- a/lib/actions/action.h
+++ b/lib/actions/action.h
@@ -21,11 +21,11 @@ public:
 #ifndef SWIG
 	eActionMap();
 	~eActionMap();
-	void bindAction(const std::string &context, int priority, int id, eWidget *widget);
+	void bindAction(const std::string &context, long long int priority, int id, eWidget *widget);
 	void unbindAction(eWidget *widget, int id);
 #endif
 
-	void bindAction(const std::string &context, int priority, SWIG_PYOBJECT(ePyObject) function);
+	void bindAction(const std::string &context, long long int priority, SWIG_PYOBJECT(ePyObject) function);
 	void unbindAction(const std::string &context, SWIG_PYOBJECT(ePyObject) function);
 
 	void bindKey(const std::string &domain, const std::string &device, int key, int flags, const std::string &context, const std::string &action);
@@ -54,7 +54,7 @@ private:
 		int m_prev_seen_make_key;
 	};
 
-	std::multimap<int, eActionBinding> m_bindings;
+	std::multimap<long long int, eActionBinding> m_bindings;
 
 	friend struct compare_string_keybind_native;
 	struct eNativeKeyBinding
